pipeline {
    agent any

    environment {
        SERVICE_NAME = 'admin-composite'
        PORT = '9090'
        API_URL = "http://${SERVICE_NAME}.local:${PORT}/api/v0/moonshot/organizations"
        USER_CHOICE = ''
        itemId = '123'
        CURL_COMMAND = ''

        JOB_NAME = 'curl-job-organizations'
        ctx = '{"default":"default"}'
    }

    stages {
        stage('User Input') {
            steps {
                script {
                    USER_CHOICE = input(
                        message: 'Choose an action',
                        ok: 'Ok',
                        parameters: [
                            choice(
                                name: 'Action',
                                choices: ['List organizations in whitelist', 'Add an organization to whitelist'],
                                description: 'Select whether to get organizations or add a new organization'
                            )
                        ]
                    )
                }
            }
        }

        stage('Call API') {
            steps {
                script {
                    if (USER_CHOICE == 'List organizations in whitelist') {
                        echo "Getting list of organizations"
                        env.curlCommand = "curl -X GET ${env.API_URL}"
                    } else {
                        echo "Add to the list of organizations"
                        env.curlCommand = """curl -X POST ${env.API_URL} -d '{"organizationId": "${env.item.Id}"}'"""  // Replace with actual POST data
                    }
                }
            }
        }

        stage('Prepare Kubernetes Job YAML') {
            steps {
                script {
                def ctx = readJSON text: env.ctx
                def namespace = ctx["${ENV}"]
                echo "Creating job ${env.JOB_NAME} in namespace ${namespace}"
                def jobYaml = """
apiVersion: batch/v1
kind: Job
metadata:
  name: ${env.JOB_NAME}
  namespace: ${namespace}
spec:
  template:
    spec:
      containers:
      - name: curl-container
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - "${env.curlCommand}"
      restartPolicy: Never
"""
                    writeFile file: "${env.JOB_NAME}.yaml", text: jobYaml
                }
            }
        }

        stage('Create Kubernetes Job') {
            steps {
                script {
                    if (fileExists("${JOB_NAME}.yaml")) {
                        echo "Applying Kubernetes job from YAML file ${JOB_NAME}.yaml"
                        sh 'kubectl  ${ENV} apply -f ${env.JOB_NAME}.yaml'
                        
                    } else {
                        error "YAML file ${JOB_NAME}.yaml not found"
                        
                    }
                    
                }
            }
        }

        stage('Check Job Status and Logs') {
            steps {
                script {
                    def podName = sh(script: "kubectl  ${ENV} get pods -l job-name=${env.JOB_NAME} -o jsonpath='.items[0].metadata.name'", returnStdout: true).trim()
                    // Wait for the pod to complete and fetch logs
                    def logs = sh(script: """
                    kubectl  ${ENV} wait --for=condition=complete pod/${podName} --timeout=5m
                    kubectl  ${ENV} logs ${podName}
                    """, returnStdout: true).trim()

                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up resources
                sh "kubectl  ${ENV} delete job ${env.JOB_NAME}"
                echo "Pipeline completed."
            }
        }
    }
}
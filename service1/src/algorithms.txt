// 1. Linear Search
// Searches for an element in an array by checking each element sequentially.
function linearSearch(arr, target) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === target) return i;
  }
  return -1;
}

// 2. Binary Search
// Searches for an element in a sorted array by repeatedly dividing the search interval in half.
function binarySearch(arr, target) {
  let left = 0, right = arr.length - 1;
  while (left <= right) {
    const mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
}

// 3. Bubble Sort
// Sorts an array by repeatedly swapping adjacent elements that are out of order.
function bubbleSort(arr) {
  let n = arr.length;
  for (let i = 0; i < n - 1; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
      }
    }
  }
  return arr;
}

/*
4. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.
*/

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    for (let i = 0; i < nums.length; i++){
        for (let j = i + 1; j < nums.length; j++){

            if(nums[i] + nums[j] === target) {
                return [i, j]
            }

        }
    }
    
};

/*
5. Remove Duplicates from Sorted Array
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

    Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
    Return k.

*/

/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function(nums) {
    const result = Array.from(new Set(nums))
    nums.forEach((elem, index, arr) => arr[index] = result[index])
    
    return result.length;
};



/*
6. palindrome
*/

/**
 * @param {number} x
 * @return {boolean}
 */
var isPalindrome = function(x) {
    const xAsStr = x.toString();
    const reverseX = xAsStr.split('').reverse();
    return xAsStr === reverseX.join('');
    
};

/*
7. Reverse String
Reverses a given string.
*/

/**
 * @param {string} str
 * @return {string}
 */
function reverseString(str) {
    return str.split('').reverse().join('');
}

/*
8. Word Frequency
Counts the frequency of words in a list.
*/

/**
 * @param {string[]} words
 * @return {Object}
 */
function wordFrequency(words) {
    const frequency = {};
    words.forEach(word => {
        frequency[word] = (frequency[word] || 0) + 1;
    });
    return frequency;
}

/*
9. Rotate Array by One
Cyclically rotates an array by one position.
*/

/**
 * @param {any[]} arr
 * @return {any[]}
 */
function rotateArrayByOne(arr) {
    if (arr.length === 0) return arr;
    const lastElement = arr.pop();
    arr.unshift(lastElement);
    return arr;
}

/*
10. Quick Sort
Sorts an array using the quicksort algorithm.
*/

/**
 * @param {number[]} arr
 * @return {number[]}
 */
function quickSort(arr) {
    if (arr.length <= 1) return arr;

    const pivot = arr[Math.floor(arr.length / 2)];
    const left = arr.filter(x => x < pivot);
    const middle = arr.filter(x => x === pivot);
    const right = arr.filter(x => x > pivot);

    return [...quickSort(left), ...middle, ...quickSort(right)];
}

/*
11. Find Numbers in Range
Finds numbers in a list within a given range.
*/

/**
 * @param {number[]} arr
 * @param {number} min
 * @param {number} max
 * @return {number[]}
 */
function findNumbersInRange(arr, min, max) {
    return arr.filter(num => num >= min && num <= max);
}

/*
12. Count One Bits
Counts the number of 1 bits in a number.
*/

/**
 * @param {number} num
 * @return {number}
 */
function countOneBits(num) {
    let count = 0;
    while (num) {
        count += num & 1;
        num >>= 1;
    }
    return count;
}

/*
13. Find Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
*/

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
function findTwoSum(nums, target) {
    const numMap = new Map();
    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        if (numMap.has(complement)) {
            return [numMap.get(complement), i];
        }
        numMap.set(nums[i], i);
    }
    return [];
}

/*
14. Stack Implementation
Implements a stack data structure.
*/

class Stack {
    constructor() {
        this.items = [];
    }

    // Adds an element to the stack
    push(element) {
        this.items.push(element);
    }

    // Removes and returns the top element of the stack
    pop() {
        if (this.isEmpty()) {
            return "Stack is empty";
        }
        return this.items.pop();
    }

    // Returns the top element of the stack without removing it
    peek() {
        if (this.isEmpty()) {
            return "Stack is empty";
        }
        return this.items[this.items.length - 1];
    }

    // Checks if the stack is empty
    isEmpty() {
        return this.items.length === 0;
    }

    // Returns the size of the stack
    size() {
        return this.items.length;
    }

    // Empties the stack
    clear() {
        this.items = [];
    }
}

/*
15. Linked List Implementation
Implements a linked list data structure.
*/

class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
        this.size = 0;
    }

    // Adds a new node at the end of the list
    append(value) {
        const newNode = new Node(value);
        if (!this.head) {
            this.head = newNode;
        } else {
            let current = this.head;
            while (current.next) {
                current = current.next;
            }
            current.next = newNode;
        }
        this.size++;
    }

    // Adds a new node at the beginning of the list
    prepend(value) {
        const newNode = new Node(value);
        newNode.next = this.head;
        this.head = newNode;
        this.size++;
    }

    // Removes a node by value
    remove(value) {
        if (!this.head) return null;

        if (this.head.value === value) {
            this.head = this.head.next;
            this.size--;
            return;
        }

        let current = this.head;
        while (current.next && current.next.value !== value) {
            current = current.next;
        }

        if (current.next) {
            current.next = current.next.next;
            this.size--;
        }
    }

    // Finds a node by value
    find(value) {
        let current = this.head;
        while (current && current.value !== value) {
            current = current.next;
        }
        return current;
    }

    // Returns the size of the list
    getSize() {
        return this.size;
    }

    // Prints the list
    print() {
        let current = this.head;
        let result = '';
        while (current) {
            result += current.value + ' -> ';
            current = current.next;
        }
        console.log(result + 'null');
    }
}










